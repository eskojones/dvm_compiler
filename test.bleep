# test source file

~foo 0xf000
.0xf000 "Welcome to the test program.\n\0"
.0xf020 "Testing 16-bit integer: \0"
.0xf040 "Testing 8-bit integer: \0"
.0xf060 "Testing byte array: \0"
.0xf080 "\r\n\0"
.0xf084 "Success!\n\0"
.0xf090 "Failed!\n\0"
.0xf100 0x4142
.0xf102 0x41
.0xf103 0x42
.0xf104 [ 0x41, 97, 0x42, 98, 0x43, 99, 0x44, 100, 0x45, 101, 0x0a ]
.0xf200 1


:start
    mov r0, $foo    # welcome msg
    int 3h
    call @test_16bit_integer
    cmp r1, 1
    jz @failed
    call @test_8bit_integer
    cmp r1, 1
    jz @failed
    call @test_byte_array
    cmp r1, 1
    jz @failed
    mov r0, 0xf084 # success msg
    int 3
    jmp @end

:test_16bit_integer
    mov r0, 0xf020
    int 3
    mov r0, 0xf100
    int 2
    mov r0, 0xf101
    int 2
    mov r0, 0xf080
    int 3
    mov r1, 0
    ret

:test_8bit_integer
    mov r0, 0xf040
    int 3
    mov r0, 0xf102
    int 2
    mov r0, 0xf103
    int 2
    mov r0, 0xf080
    int 3
    mov r1, 0
    ret

:test_byte_array
    mov r0, 0xf060                # print "testing byte array"
    int 3                         #
    mov r0, 0xf104                # move the address of byte array into reg 0
    mov r1, r0                    # move reg 0 into reg 1
    add r1, 0x0a                  # add 0x0a to reg 1
    :test_byte_array_loop
        int 2                     # print next character
        inc r0                    # add 1 to reg 0
        cmp r0, r1                # compare reg 0 and reg 1
        jl @test_byte_array_loop  # loop if reg 0 is lessthan reg 1
    mov r0, 0xf080                # print newline string
    int 3                         # 
    mov r1, 0
    ret

:failed
    mov r0, 0xf090
    int 3

:end
    hlt

